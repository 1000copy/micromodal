var version="0.2.1";const MicroModal=(()=>{const e=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"])',"select:not([disabled])","textarea:not([disabled])","button:not([disabled])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'];class o{constructor({targetModal:targetModal,triggers:triggers=[],disableScroll:disableScroll=!1,debugMode:debugMode=!1,onShow:onShow=(()=>{}),onClose:onClose=(()=>{}),openTrigger:openTrigger="data-micromodal-trigger",closeTrigger:closeTrigger="data-micromodal-close"}){this.modal=document.getElementById(targetModal),triggers.length>0&&this.registerTriggers(...triggers),this.config={debugMode:debugMode,disableScroll:disableScroll,openTrigger:openTrigger,closeTrigger:closeTrigger,onShow:onShow,onClose:onClose},this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}registerTriggers(...e){e.forEach(e=>{e.addEventListener("click",()=>this.showModal())})}showModal(){this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),window.requestAnimationFrame(()=>{this.modal.classList.add("is-open");this.setFocusToFirstNode()}),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.onShow(this.modal)}closeModal(){const e=this.modal;this.modal.addEventListener("animationend",function o(){window.requestAnimationFrame(()=>e.classList.remove("is-open")),e.removeEventListener("animationend",o,!1)},!1),this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement.focus(),this.config.onClose(this.modal)}scrollBehaviour(e){if(!1!==this.config.disableScroll){const o=document.querySelector("body");switch(e){case"enable":Object.assign(o.style,{overflow:"initial",height:"initial"});break;case"disable":Object.assign(o.style,{overflow:"hidden",height:"100vh"})}}}addEventListeners(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}removeEventListeners(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}onClick(e){e.target.hasAttribute(this.config.closeTrigger)&&(this.closeModal(),e.preventDefault())}onKeydown(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.maintainFocus(e)}getFocusableNodes(){const o=this.modal.querySelectorAll(e);return Object.keys(o).map(e=>o[e])}setFocusToFirstNode(){const e=this.getFocusableNodes();e.length&&e[0].focus()}maintainFocus(e){var o=this.getFocusableNodes(),t=o.indexOf(document.activeElement);e.shiftKey&&0===t&&(o[o.length-1].focus(),e.preventDefault()),e.shiftKey||t!==o.length-1||(o[0].focus(),e.preventDefault())}}const t=(e,o)=>{console.log(e,o);const t=[];e.forEach(e=>{const n=o&&e.attributes[o].value||e.dataset.micromodalTrigger;console.log(n);void 0===t[n]&&(t[n]=[]);t[n].push(e)});return t};const n=e=>{if(!document.getElementById(e))return console.warn(`MicroModal v${version}: ❗Seems like you have missed %c'${e}'`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn(`%cExample:`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;",`<div class="modal" id="${e}"></div>`),!1};const i=e=>{if(e.length<=0)return console.warn(`MicroModal v${version}: ❗Please specify at least one %c'micromodal-trigger'`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn(`%cExample:`,"background-color: #f8f9fa;color: #50596c;font-weight: bold;",`<a href="#" data-micromodal-trigger="my-modal"></a>`),!1};const s=(e,o)=>{i(e);if(!o)return!0;for(var t in o)n(t);return!0};const r=e=>{const n=e||{};const i=[...document.querySelectorAll(!!n.openTrigger&&"["+n.openTrigger+"]"||"[data-micromodal-trigger]")];const r=t(i,n.openTrigger);if(!0===n.debugMode&&!1===s(i,r))return;for(var c in r){let e=r[c];n.targetModal=c,n.triggers=[...e],new o(n)}};let c=null;const l=(e,t)=>{const i=t||{};i.targetModal=e;if(!0===i.debugMode&&!1===n(e))return;c=new o(i);c.showModal()};const a=()=>{c.closeModal()};return{init:r,show:l,close:a}})();export default MicroModal;
